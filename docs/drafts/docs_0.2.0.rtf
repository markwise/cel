{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf510
{\fonttbl\f0\fswiss\fcharset0 ArialMT;}
{\colortbl;\red255\green255\blue255;\red26\green26\blue26;\red163\green217\blue121;}
\margl1440\margr1440\vieww13780\viewh17420\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\sl360\slmult1\pardirnatural

\f0\fs30 \cf2 \
0.2.0 docs\
\
This project is actively developed and is subject to change based on work toward the 1.0.0 release.\

\b \
Cel
\b0 \
\
\
\
\
Cel is a responsive CSS framework that does not rely on pixel perfection to create multi-column layouts. \
\
It is designed from the ground up to be naturally responsive.\
\
Column widths and gaps are defined using percentages, so they are flexible and scale with any screen size on any device.\
\
\
\
not a ui framework\
\
focus is on creating multi column layouts\
\
grid is an overused term \
\
not a grid system\
\
\
\
\
\
Browser support includes:\
\
Safari 3.1+ (flexbox)\
Firefox 12 - 21 (inline-block)\
Firefox 22+ (flexbox)\
Internet Explorer 8 - 9 (inline-block)\
Internet Explorer 10+ (flexbox)\
Chrome 4+ (flexbox)\
Opera 12.1+ (flexbox)\
iOS 3.2 (flexbox)\
Android 2.1+ (flexbox)\
\
\
\
\
\
\
\
\ul \ulc0 Download the 0.2.0 release\ulnone \
\
\ul View the 0.2.0 release\ulnone \
\
\ul View the 0.2.0 docs\ulnone \
\
\ul Changelog\ulnone \
\
\ul Todo's\ulnone \

\b \
\
Browser support\
\
\
\

\b0 \
\
\
\
\
\

\b License
\b0 \
\
Cel is owned and maintained by Mark Wise. It is released under the MIT License.\
\
\
\
\
\
\
\
cel\
	about\
	browser support\
	downloads\
	license\
motivation\
setup\
nickel tour\
syntax\
layouts\
	authored\
	structured\
	nested\
	grid\
	responsive\
classes\
	split\
	cel\
	by\
	with-gap\
	align\
	flip\
	cel-line\
	hide~\
	show~\
\
\

\b \
\
Classes
\b0 \
\
There are five classes, two core class and three helper classes. Skip ahead to learn more or take the nickel tour below.\
\
split, cel\
by\
with-gap\
align\
flip\
\
\
\
\
\

\b nickel tour
\b0 \
\
By itself, split creates a generic layout that can be modified outside the cel framework and/or further refined with helper classes as described in the following sections.\
\
Layouts can also be nested, built into grids and setup to respond to various screen sizes\
\
See layouts.\
\
\

\b \
\
Layouts
\b0 \
\
Cel can be used to create layouts in two different contexts, authored and structured. \
\
Authored layouts use a subset of cel helper classes and allow the author to define column widths. This context provides the most flexibility and allows the author to work outside the cel framework.\
\
With structured layouts, column widths, gap sizes and other layout characteristics are controlled entirely by cel helper classes. Since helper classes are the strength in the cel framework, it is always recommended to define layouts before authoring your own.\
\
\

\b Authored layouts
\b0 \
\
The class split by itself creates a generic (authored) layout that can be modified by the author (you). Column widths can safely be defined without affecting the core framework. The only helper classes available in this context are align and flip.\
\
To create an authored layout, add the class \cb3 cel\cb1  to columns and the class \cb3 split\cb1  to the columns' parent.\
\
<div class="split">\
	<div class="cel">A</div>\
	<div class="cel">B</div>\
	<div class="cel">C</div>\
</div>\
\
An authored layout is nothing more than the default state of a cel layout after adding the class cel to columns and the class split to the columns parent.\
\
\
This context is useful for layouts where columns widths have not been defined\
\
\
\
\
\
\
\
Cel is not restricted to a set number of columns, but if the there is not enough horizontal space to accommodate them, the columns will wrap.\
\
\
The following example defines a 3 column layout, where the first column has a width of 20%, the second column has a width of 30% and the third column has a width of 50%.\
\
<style>\
	.cel:nth-child(1) \{\
		width:20%;\
	\}\
	.cel:nth-child(2) \{\
		width:30%;\
	\}\
	.cel:nth-child(3) \{\
		width:50%;\
	\}\
</style>\
\
<div class="split">\
	<div class="cel">A</div>\
	<div class="cel">B</div>\
	<div class="cel">C</div>\
</div>\
\
\
The above example defines a cel layout with custom column widths that are flush with each other. But what we really want is a 5% gap between columns.\
\
Cel uses text-align:justify to distribute cels across a layout. \
\
\
\
\
Lets do some math\
\
100% - (columns - 1 * gap size)\
\
\
\
100% - 10% = 90%\
\
90 * 20 = 100x\
1800 / 100 = x\
x = 18%\
\
90 * 30 = 100x\
2700 / 100 = x\
x = 27%\
\
90 * 50 = 100\
4500 / 100 = x\
x = 45%\
\
\
\
\
\
\
\
\
\
\
\
\

\b Structured layouts
\b0 \
\
class by: is used to create a structured layout\
\
with-gap: can only be used with structured layouts\
\
you never define you own columns widths with structured layouts\
\
this what you will most often use to create layouts\
\
Adding the class by to a layout defines a structured layout context. Columns widths can be split evenly creating equal width columns or by a ratio\
\
\
\
\

\b Nested layouts\
\

\b0 A split element's structure can be nested to create complex layouts as shown below.\
\
can be nested an unlimited number of times\
\
doesn't make sense to nest to far as the columns get to small\
\
gap sizes must be increased the smaller the columns to make them useful\
\
\
<div class="split">\
	<div class="cel">\
		<div class="split">\
			<div class="cel">A1</div>\
			<div class="cel">A2</div>\
		</div>\
	</div>\
	<div class="cel"></div>\
</div>\
\
Columns, however, cannot be split elements.\
\
not\
\
<div class="split">\
	<div class="cel split">\
		<div class="cel">A1</div>\
		<div class="cel">A2</div>\
	</div>\
	<div class="cel">B</div>\
</div>\
\
or\
\
<div class="split">\
	<div class="split">\
		<div class="cel">A1</div>\
		<div class="cel">A2</div>\
	</div>\
	<div class="cel">B</div>\
</div>\
\
\
\
\
\

\b Responsive layouts
\b0 \
\
The class split has an alternate syntax that allows a cel layout to respond to various screen sizes.\
\
takes the following form\
\
split~<size>\
\
\
The tilde (~) in the cel framework has special meaning. Specifically it means, respond if the screen size is less than or equal to the screen size argument\
\
\
All styles that were applied via cel classes are removed and elements are returned to their original state before any classes were applied.\
\
\
Cel can respond to screen sizes from 480 to 960 in increments of 20.\
\
The following split layout will respond if the screen size is less than or equal to 800\
\
<div class="split~800">\
\
</div>\
\
\
\
\
\
Hiding elements\
\
hide~\
\
\
\
Showing elements\
\
show~\
\
\
\
\
cel\
\
\
\
\
\
\

\b \

\fs48 split, cel
\fs30 \

\b0 \
The classes \cb3 split\cb1  and \cb3 cel\cb1  are the only required classes in the cel framework. Cel is added to columns (cels) and split is added to the columns' parent.\
\
Adding the class split to an element defines a layout. This sets the element's display type to block and guarantees a layout has a block context that will stack in the flow of the document.\
\
Adding the class cel to an element defines a column within a layout. Columns are created by setting the element's display type to inline-block. This allows width and height values to be set, and columns to be manipulated by text properties, such as text-align, vertical-align and text-direction, all of which are used throughout the cel framework.\
\
The default horizontal alignment of columns is justify and cannot be changed with a helper class and should not be changed outside the cel framework. Cel relies on justified alignment to keep the first and last columns flush with left and right edges of a layout while distributing additional columns evenly across the remaining space. This provides a natural way to create gaps between columns without using margins or positioning.\
\
The default vertical alignment is top and can be changed with the align helper class.\
\
To create a layout, add the class \cb3 cel\cb1  to columns and the class \cb3 split\cb1  to the columns' parent.\
\
<div class="split">\
	<div class="cel">A</div>\
	<div class="cel">B</div>\
</div>\

\b\fs48 \
\
by:<columns|ratio>
\b0\fs30 \
\
The helper class \cb3 by\cb1  is used to define columns widths for a layout. This creates a structured layout context in which the cel framework controls column widths and should not be overridden. See authored layouts for defining custom columns widths.\
\
By has no default value and requires an argument expressed as an integer or a fraction. If the argument is an integer, column widths will be split evenly by that value. If the argument is a fraction, column widths will be split by a ratio based on that value.\
\
The following layout defines three equal width columns.\
\
<div class="split by:3">\
	<div class="cel">A</div>\
	<div class="cel">B</div>\
	<div class="cel">C</div>\
</div>\
\
The following layout defines column widths by a ratio of 2 to 1. Column A is 2x the width of column B.\
\
<div class="split by:2/1">\
	<div class="cel">A</div>\
	<div class="cel">B</div>\
</div>\
\
Cel supports up to five equal width columns and six ratios that affect two column layouts.\
\
If the argument is an integer:\
\

\b by:2
\b0 		two equal width columns\

\b by:3
\b0 		three equal width columns\

\b by:4
\b0 		four equal width columns\

\b by:5
\b0 		five equal width columns\
\
If the argument is a fraction:\
\

\b by:1/2	
\b0 column two is 2x the size of column one\

\b by:2/1
\b0 	column one is 2x the size of column two\

\b by:1/3
\b0 	column two is 3x the size of column one\

\b by:3/1
\b0 	column one is 3x the size of column two\

\b by:2/3
\b0 	column two is 1/3 wider than column one\

\b by:3/2
\b0 	column one is 1/3 wider than column two\
\
\

\b Grid layouts
\b0 \
\
Grids are created by adding more columns to a layout than defined with the by helper class causing additional columns to wrap. It's important to note that all helper classes used in grid layouts maintain their integrity. Adding cel-lines should be avoided.\
\
To create a 4x4 grid with equal width columns, add the class \cb3 by:2\cb1  to a layout with four columns.\
\
<div class="split by:2">\
	<div class="cel">A</div>\
	<div class="cel">B</div>\
	<div class="cel">C</div>\
	<div class="cel">D</div>\
</div>\
\
To create a 4x4 grid with offset column widths, add the class \cb3 by:1/2\cb1  to a layout with four columns.\
\
<div class="split by:1/2">\
	<div class="cel">A</div>\
	<div class="cel">B</div>\
	<div class="cel">C</div>\
	<div class="cel">D</div>\
</div>\

\b\fs48 \
\
with-gap:<percent>
\b0\fs30 \
\
The helper class \cb3 with-gap\cb1  adds horizontal space between columns and can only be used in combination with the by helper class.\
\
With-gap has no default value and requires an argument expressed as an integer, which represents a percentage of a layout's width.\
\
To add a 1% gap between columns, pass the value 1 as an argument to the class.\
\
<div class="split by:2 with-gap:1">\
	<div class="cel">A</div>\
	<div class="cel">B</div>\
</div>\
\
Cels supports gap sizes up to 5%.\
\

\b with-gap:1
\b0 	1% gap\

\b with-gap:2
\b0 	2% gap\

\b with-gap:3
\b0 	3% gap\

\b with-gap:4
\b0 	4% gap\

\b with-gap:5
\b0 	5% gap\

\b\fs48 \
\
align:<vertical alignment>
\fs30 \

\b0 \
The class \cb3 align\cb1  can be used to change the horizontal and vertical alignment of columns (cels). The default horizontal alignment is justify, which distributes columns evenly across their parent. The default vertical alignment is top.\
\
Align accepts a string as an argument to the class. If the value is one or more h's, alignment will be horizontal. If the value is one or more v's alignment will be vertical. The number of h's or v's corresponds to the alignment position.\
\
\
\

\b align:top
\b0 \

\b align:middle
\b0 \

\b align:bottom
\b0 \
\
\
\
\
To align columns left, add the class \cb3 align:h\cb1  to a split element.\
\
<div class="split align:h">\
	<div class="cel">A</div>\
	<div class="cel">B</div>\
	<div class="cel">C</div>\
</div>\
\
To align columns center, add the class \cb3 align:hh\cb1  to a split element.\
\
<div class="split align:hh">\
	<div class="cel">A</div>\
	<div class="cel">B</div>\
	<div class="cel">C</div>\
</div>\
\
\
\

\b \
\
flip
\b0 \
\
The class \cb3 flip\cb1  reverses the column order in the rendered page.\
\
When the page is rendered, the columns will be ordered from left to right D, C, B, A.\
\
<div class="split flip">\
	<div class="cel">A</div>\
	<div class="cel">B</div>\
	<div class="cel">C</div>\
	<div class="cel">D</div>\
</div>\
\
\
\
\
\
\
\
\
\
\
\
}